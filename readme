DubOS
=====

DubOS is a long term project in kernel development. Its a hobby so progress tends to be glacial.

It's long term aim is to become an environment for dedicated audio signal processing; whether it will ever reach that is another story! For now it's interesting just to venture into the world of hardware programming.

Current
-------

MBR relocates itself to 0x0600, chainloads the boot sector of the bootable partition and far jumps to the second stage boot code.

Swapped everything over from floppy image to hard disk image; Hard disk is now partitioned. Built a tool for selecting a partition and writing bootstrap code to it's boot sector.

The progress that I made with the actual kernel is all waiting to be loaded up but now gathering dust; I just need to finish writing it's boot loader!


Overview
--------

Booting:

* Beginnings of two stage bootloader, stage 1 is close to chainloading the beginnings of stage 2
* A tool for writing bootstrap code to a partition

Kernel:

* kprintf function that prints dec and hex numbers correctly- written assembly routine that converts uint32 to hex. This function can display correct memory addresses. kprintf is written in assembly as well. Whether it 'beats the compiler'  is not tested -- probably doesn't -- but is interesting none the less.
* C routines for managing page allocation - this has not been tested on metal! only  in bochs.
* Programmable Interrupt Controller initialized correctly
* Basic interrupt service routines. Not thoroughly tested.
* Fairly thorough comments on GDT, IDT. Start of comments on page tables.

Other:
* Reference card on master boot record and partition table
* Start of reference card on real mode interrupt 0x13h
