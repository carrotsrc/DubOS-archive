DubOS
=====

Notes
-----

DubOS is an exploration into kernel development.
It's long term aim is to become an environment for dedicated audio signal processing;
whether it will ever reach that is another story! For now it's interesting just to 
venture into the world of hardware programming.

Mainly tested on bochs, but early builds were tested straight on the metal. Includes
bash scripts for compiling, installing and loading in bochs.

Current Task
------------

I was using the hack of giving the GDT descriptors a base of 0x40000000 - so when 
added to an address would overflow the 32bit register and loop to the correct 
physical address, all in order for a higher half kernel to work before paging; 
since then I have scrapped the hack and decided to write my own boot loader.

After some faffing about I have got the Initial Boot Environment to print messages 
using the text buffer and also load the second sector of the floppy. The second 
sector is holding the Extended Boot Environment which is planned on having the 
assembly to load the kernel off ext2 or fat formatted blocks.

There is code to correctly switch the system into protected mode when the time
is right.


Points of Interest
------------------

* Started work on boot loader- currently loads second sector of floppy disk
  and prints messages to text buffer
  
* Protected mode switch

* kprintf function that prints dec and hex numbers correctly- written assembly
  routine that converts uint32 to hex. This function can display correct memory
  addresses. kprintf is written in assembly as well. Whether it 'beats the compiler'
  is not tested -- probably doesn't -- but is interesting none the less.

* C routines for managing page allocation - this has not been tested on metal! only
  in bochs.

* Programmable Interrupt Controller initialized correctly

* Basic interrupt service routines. Not thoroughly tested.

* Fairly thorough comments on GDT, IDT. Start of comments on page tables.
